"""
===========================================================================
Reconstruction with Robust and Unbiased Model-BAsed Spherical Deconvolution
===========================================================================

This example shows how to use RUMBA-SD to reconstruct fiber orientation
density functions (fODFs). This model was introduced by Canales-Rodriguez
et al [CanalesRodriguez2015]_.

RUMBA-SD uses a priori information about the fiber response function (axial
and perpendicular diffusivities) to generate a convolution kernel mapping the
fODF on a sphere to the recorded data. The fODF is then estimated using an
iterative, maximum likelihood estimation algorithm adapted from Richardson-Lucy
(RL) deconvolution [Richardson1972]_. Specifically, the RL algorithm assumes
Gaussian noise, while RUMBA assumes Rician/Noncentral Chi noise -- these more
accurately reflect the noise generated by MRI scanners [Constantinides1997]_.
This algorithm also contains an optional compartment for estimating an
isotropic volume fraction to account for partial volume effects.

RUMBA-SD works with single- and multi-shell data, as well as data recorded in
Cartesian or spherical coordinate systems.

The result from RUMBA-SD can be smoothed by applying total variation spatial
regularization (termed RUMBA-SD + TV), a technique which promotes a more
coherent estimate of the fODF across neighboring voxels [Rudin1992]_.
This regularization ability is also included in this implementation.

This example will showcase how to:
    1. Estimate the fiber response function
    2. Reconstruct the fODF voxel-wise or globally with TV regularization
    3. Visualize fODF maps

To begin, we will load the data, consisting of 10 b0s and 150 non-b0s with a
b-value of 2000.
"""

import numpy as np

from dipy.core.gradients import gradient_table
from dipy.data import get_fnames, default_sphere
from dipy.io.gradients import read_bvals_bvecs
from dipy.io.image import load_nifti

hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
data, affine = load_nifti(hardi_fname)

bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
gtab = gradient_table(bvals, bvecs)

"""
Step 1. Estimation of the fiber response function
=================================================

There are multiple ways to estimate the fiber response function.

**Strategy 1: use default values**
One simple approach is to use the values included as the default arguments in
the `RumbaSD` constructor. The larger eigenvalue or the axial diffusivity,
`lambda1`, is set to 1.7e-3, while the smaller eigenvalue or the perpendicular
diffusivity, `lambda2`, is set to 0.2e-3. The mean isotropic diffusivity,
`lambda_iso`, is set to 3.0e-3, which is the diffusivity of water at 37 degrees
celsius [CanalesRodriguez2015]_. These default values will often be adequate as
RUMBA-SD is robust against impulse response imprecision [DellAcqua2007]_.
"""

from dipy.reconst.rumba import RumbaSD

rumba = RumbaSD(gtab)
print(f"lambda1: {rumba.lambda1}, lambda2: {rumba.lambda2}," +
      f"lambda_iso: {rumba.lambda_iso}")

"""
lambda1: .0017, lambda2: 0.0002, lambda_iso: 0.003

We can visualize what this default response looks like.
"""

from dipy.viz import window, actor
from dipy.sims.voxel import single_tensor_odf

# Enables/disables interactive visualization
interactive = False

scene = window.Scene()

evals = [rumba.lambda1, rumba.lambda2, rumba.lambda2]
evecs = np.array([[0, 1, 0], [0, 0, 1], [1, 0, 0]]).T

response_odf = single_tensor_odf(default_sphere.vertices, evals, evecs)
# Transform our data from 1D to 4D
response_odf = response_odf[None, None, None, :]
response_actor = actor.odf_slicer(response_odf, sphere=default_sphere,
                                  colormap='plasma')

scene.add(response_actor)
print('Saving illustration as default_response.png')
window.record(scene, out_path='default_response.png', size=(200, 200))

if interactive:
    window.show(scene)

"""
.. figure:: default_response.png
   :align: center

   Default response function.

"""

scene.rm(response_actor)

"""
**Strategy 2: estimate from local brain region**
The `csdeconv` module contains functions for estimating this response.
`auto_response_sst` extracts a ROI in the center of the brain and isolates
single fiber populations from the corpus callosum using a FA mask with a
threshold of 0.7. These voxels are used to estimate the response function.
"""

from dipy.reconst.csdeconv import auto_response_ssst

response, _ = auto_response_ssst(gtab, data, roi_radii=10, fa_thr=0.7)
print(response)

"""
(array([ 0.0014,  0.00029,  0.00029]), 416.206)

This response contains the estimated eigenvalues in its first element, and the
estimated S0 in the second. The eigenvalues are all we care about for using
RUMBA-SD.

We can visualize this estimated response as well.
"""

evals = response[0]
evecs = np.array([[0, 1, 0], [0, 0, 1], [1, 0, 0]]).T

response_odf = single_tensor_odf(default_sphere.vertices, evals, evecs)
# transform our data from 1D to 4D
response_odf = response_odf[None, None, None, :]
response_actor = actor.odf_slicer(response_odf, sphere=default_sphere,
                                  colormap='plasma')
scene.add(response_actor)
print('Saving illustration as estimated_response.png')
window.record(scene, out_path='estimated_response.png', size=(200, 200))
if interactive:
    window.show(scene)

"""
.. figure:: estimated_response.png
   :align: center

   Estimated response function.

"""

scene.rm(response_actor)

"""

Step 2. fODF Reconstruction
===========================

We will now use the estimated response function with the RUMBA-SD model to
reconstruct the fODF. As mentioned previously, we will use the default value
for `lambda_iso`. If one doesn't wish to fit this isotropic compartment, one
can specify `lambda_iso` as `None`. This will result in the estimated isotropic
volume fraction map being all zeroes.

When constructing the RUMBA-SD model, one can also specify `n_iter`,
`recon_type`, `n_coils`, and `R`. `n_iter` is the number of iterations for the
iterative estimation, and the default value of 600 should be suitable for most
applications. `recon_type` is the technique used by the MRI scanner to
reconstruct the MRI signal, and should be iether 'smf' for 'spatial matched
filter', or 'sos' for 'sum-of-squares'; 'smf' is a common choice and is the
default, but the specifications of the MRI scanner used to collect the data
should be checked. If 'sos' is used, then it's important to specify `n_coils`,
which is the number of coils in the MRI scanner. With 'smf', this isn't
important and the default argument of 1 can be used. Finally, `R` is the
acceleration factor of the MRI scanner, which is termed the iPAT factor for
SIEMENS, the ASSET factor for GE, or the SENSE factor for PHILIPS. 1 is a
common choice, and is the default for the model. This is only important when
using TV regularization, which will be covered later in the tutorial.
"""

rumba = RumbaSD(gtab, lambda1=response[0][0], lambda2=response[0][1])

"""
For efficiency, we will only fit a small part of the data. This is the same
portion of data used in :ref:`example_reconst_csd`.
"""

data_small = data[20:50, 55:85, 38:39]

"""
**Option 1: voxel-wise fit**
This is the standard framework in DIPY for generating ODFs, wherein each voxel
is fit sequentially. This is done using the typical `fit`, `odf` sequence.

We will estimate the fODF using the `default_sphere` ("repulsion724"). This
will take about a minute to compute.
"""

rumba_fit = rumba.fit(data_small)
odf = rumba_fit.odf(default_sphere)

"""
The inclusion of RUMBA-SD's isotropic compartment means we can also extract
the isotropic volume fraction map as well as the white matter volume fraction
map (the fODF sum at each voxel). These values are normalized such that they
sum to 1. If the isotropic compartment is not included, then the isotropic
volume fraction map will all be zeroes.
"""

f_iso = rumba_fit.f_iso(default_sphere)
f_wm = rumba_fit.f_wm(default_sphere)

"""
We can visualize these maps using adjacent heatmaps.
"""

import matplotlib.pyplot as plt

fig, axs = plt.subplots(1, 2, figsize=(12, 5))

ax0 = axs[0].imshow(f_wm[..., 0].T, origin='lower')
axs[0].set_title("Voxelwise White Matter Volume Fraction")

ax1 = axs[1].imshow(f_iso[..., 0].T, origin='lower')
axs[1].set_title("Voxelwise Isotropic Volume Fraction")

plt.colorbar(ax0, ax=axs[0])
plt.colorbar(ax1, ax=axs[1])

plt.savefig('wm_iso_partition.png')

"""
.. figure:: wm_iso_partition.png
   :align: center

   White matter and isotropic volume fractions
"""

"""
To visualize the fODF, it's recommended to combine the fODF and the isotropic
component. This is done using the `RumbaFit` object's method
`combined_odf_iso`. To reach a proper scale for visualization, the argument
`norm=True` is used in FURY's `odf_slicer` method.
"""

combined = rumba_fit.combined_odf_iso(default_sphere)

fodf_spheres = actor.odf_slicer(
    combined, sphere=default_sphere, norm=True, scale=0.9, colormap=None)
scene.add(fodf_spheres)
print('Saving illustration as rumba_odfs.png')
window.record(scene, out_path='rumba_odfs.png', size=(600, 600))
if interactive:
    window.show(scene)

"""
.. figure:: rumba_odfs.png
   :align: center

   RUMBA-SD fODFs
"""

scene.rm(fodf_spheres)

"""
We can extract the peaks from this fODF using `peaks_from_model`. This will
reconstruct the fODFs again, so will take about a minute to run.
"""

from dipy.direction import peaks_from_model

rumba_peaks = peaks_from_model(model=rumba,
                               data=data_small,
                               sphere=default_sphere,
                               relative_peak_threshold=.5,
                               min_separation_angle=25,
                               normalize_peaks=False,
                               parallel=True)

"""
For visualization, we scale up the peak values.
"""

peak_values = np.clip(rumba_peaks.peak_values * 15, 0, 1)
peak_dirs = rumba_peaks.peak_dirs

fodf_peaks = actor.peak_slicer(peak_dirs, peak_values)
scene.add(fodf_peaks)

print('Saving illustration as rumba_peaks.png')
window.record(scene, out_path='rumba_peaks.png', size=(600, 600))
if interactive:
    window.show(scene)

"""
.. figure:: rumba_peaks.png
   :align: center

   RUMBA-SD peaks
"""

scene.rm(fodf_peaks)

"""
**Option 2: global fit**
Instead of the voxel-wise fit, RUMBA also comes with an implementation of
global fitting where all voxels are fit simultaneously. This comes with some
potential benefits such as:

1. More efficient fitting due to matrix parallelization, in exchange for
   larger demands on RAM
2. The option for spatial regularization; specifically, TV regularization is
   built into the fitting function (RUMBA-SD + TV)

This is done using the `global_fit` function.

TV regularization requires a volume without any singleton dimensions, so we'll
have to start be expanding our data slice.
"""

data_tv = data[20:50, 55:85, 38:40]

"""
Here, we generate the fODF and other maps in one step. This will take about 90
seconds.
"""

from dipy.reconst.rumba import global_fit

g_odf, g_f_iso, g_f_wm, g_combined = global_fit(rumba,
                                                data_tv,
                                                default_sphere,
                                                use_tv=True)

"""
Now we can visualize the combined fODF map as before.
"""

fodf_spheres = actor.odf_slicer(g_combined, sphere=default_sphere, norm=True,
                                scale=0.9, colormap=None)

scene.add(fodf_spheres)
print('Saving illustration as rumba_g_odfs.png')
window.record(scene, out_path='rumba_g_odfs.png', size=(600, 600))
if interactive:
    window.show(scene)

"""
.. figure:: rumba_g_odfs.png
   :align: center

   RUMBA-SD + TV fODFs
"""

"""
This can be compared with the result without TV regularization, and one can
observe that the coherence between neighboring voxels is improved.
"""

scene.rm(fodf_spheres)

"""
For peak detection, `peaks_from_model` cannot be used. Instead, we'll compute
our peaks using a for loop.
"""

from dipy.direction import peak_directions

shape = g_odf.shape[:3]
npeaks = 5  # maximum number of peaks returned for a given voxel
g_peak_dirs = np.zeros((shape + (npeaks, 3)))
g_peak_values = np.zeros((shape + (npeaks,)))

for idx in np.ndindex(shape):  # iterate through each voxel
    # Get peaks of odf
    direction, pk, _ = peak_directions(g_odf[idx], default_sphere,
                                       relative_peak_threshold=0.5,
                                       min_separation_angle=25)

    # Calculate peak metrics
    if pk.shape[0] != 0:
        n = min(npeaks, pk.shape[0])
        g_peak_dirs[idx][:n] = direction[:n]
        g_peak_values[idx][:n] = pk[:n]

# Scale up for visualization
g_peak_values = np.clip(g_peak_values * 15, 0, 1)

fodf_peaks = actor.peak_slicer(g_peak_dirs, g_peak_values)
scene.add(fodf_peaks)

print('Saving illustration as rumba_g_peaks.png')
window.record(scene, out_path='rumba_g_peaks.png', size=(600, 600))
if interactive:
    window.show(scene)

"""
.. figure:: rumba_g_peaks.png
   :align: center

   RUMBA-SD + TV peaks
"""

scene.rm(fodf_peaks)

"""
References
----------

.. [CanalesRodriguez2015] Canales-Rodríguez, E. J., Daducci, A., Sotiropoulos,
   S. N., Caruyer, E., Aja-Fernández, S., Radua, J., Mendizabal, J. M. Y.,
   Iturria-Medina, Y., Melie-García, L., Alemán-Gómez, Y., Thiran, J.-P.,
   Sarró, S., Pomarol-Clotet, E., & Salvador, R. (2015). Spherical
   Deconvolution of Multichannel Diffusion MRI Data with Non-Gaussian Noise
   Models and Spatial Regularization. PLOS ONE, 10(10), e0138910.
   https://doi.org/10.1371/journal.pone.0138910


.. [Richardson1972] Richardson, W. H. (1972). Bayesian-Based Iterative Method
   of Image Restoration*. JOSA, 62(1), 55–59.
   https://doi.org/10.1364/JOSA.62.000055


.. [Constantinides1997] Constantinides, C. D., Atalar, E., & McVeigh, E. R.
   (1997). Signal-to-Noise Measurements in Magnitude Images from NMR Phased
   Arrays. Magnetic Resonance in Medicine : Official Journal of the Society of
   Magnetic Resonance in Medicine / Society of Magnetic Resonance in Medicine,
   38(5), 852–857.


.. [Rudin1992] Rudin, L. I., Osher, S., & Fatemi, E. (1992). Nonlinear total
   variation based noise removal algorithms. Physica D: Nonlinear Phenomena,
   60(1), 259–268. https://doi.org/10.1016/0167-2789(92)90242-F


.. [DellAcqua2007] Dell’Acqua, F., Rizzo, G., Scifo, P., Clarke, R., Scotti,
   G., & Fazio, F. (2007). A Model-Based Deconvolution Approach to Solve Fiber
   Crossing in Diffusion-Weighted MR Imaging. IEEE Transactions on Bio-Medical
   Engineering, 54, 462–472. https://doi.org/10.1109/TBME.2006.888830


.. include:: ../links_names.inc

"""
